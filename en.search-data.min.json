[{"id":0,"href":"/debian10/","title":"Debian10","parent":"Step by Step Dev","content":""},{"id":1,"href":"/debian10/jitsi/jitsi/","title":"Jitsi Setup","parent":"Jitsi","content":"Required packages and repository updates    Install required packages\n# Data encryption $ sudo apt install gnupg2 # Web server $ sudo apt install nginx-full # Java Runtime Environment $ sudo apt install default-jre # Java 11 (should already be installed on Debian 10) $ sudo apt install openjdk-11-jre-headless  What is the recommended Java Version? ↕  Jitsi team made optimizations for Java 8, however, Debian 10 (Buster) supports only Java 11 officially\nSource: Jitsi Community Forum     Retrieve latest packages:\n$ sudo apt update # Ensure support for apt repositories served via HTTPS $ sudo apt install apt-transport-https # Retrieve the latest package versions across all repositories $ sudo apt update $ sudo apt upgrade  Network Setup ↕  Domain: debbie.net\nOpen windows hosts file (C:\\Windows\\System32\\drivers\\etc\\hosts) in notepad and add:\n# hosts 192.168.2.72 debbie.net Then go to hosts file in Debian server:\n# /etc/hosts 192.168.2.72 debserver10.debbie.net debserver10  Set up the Fully Qualified Domain Name (FQDN) (optional):  $ nvim /etc/hosts # Add to file: 127.0.0.1 localhost 192.168.2.72 debbie.net    Add the Jitsi package repository    This will add the jitsi repository to your package sources to make the Jitsi Meet packages available.\n$ curl https://download.jitsi.org/jitsi-key.gpg.key | sudo sh -c \u0026#39;gpg --dearmor \u0026gt; /usr/share/keyrings/jitsi-keyring.gpg\u0026#39; $ echo \u0026#39;deb [signed-by=/usr/share/keyrings/jitsi-keyring.gpg] https://download.jitsi.org stable/\u0026#39; | sudo tee /etc/apt/sources.list.d/jitsi-stable.list \u0026gt; /dev/null # update all package sources $ sudo apt update Setup and configure your firewall    $ sudo apt install ufw $ sudo ufw allow 80/tcp \u0026amp;\u0026amp; sudo ufw allow 443/tcp \u0026amp;\u0026amp; sudo ufw allow 10000/udp \u0026amp;\u0026amp; sudo ufw allow 22/tcp \u0026amp;\u0026amp; sudo ufw allow 3478/udp \u0026amp;\u0026amp; sudo ufw allow 5349/tcp $ sudo ufw enable $ sudo ufw status verbose Install Jitsi Meet    Hostname: IP address of machine: 192.168.2.72\nSSL/TLS certificate generation: Choose option (1) Generate TLS certificate\n# jitsi-meet installation $ sudo apt install jitsi-meet # Generate a Let\u0026#39;s Encrypt certificate (optional, recommended) $ sudo /usr/share/jitsi-meet/scripts/install-letsencrypt-cert.sh  Note from Let\u0026rsquo;s Encrypt: \u0026ldquo;Requested name 192.168.2.72 is an IP address. The Let\u0026rsquo;s Encrypt certificate authority will not issue certificates for a bare IP address.\n Systemd Commands    # To reload the systemd changes on a running system execute  $ sudo systemctl daemon-reload $ sudo systemctl restart jitsi-videobridge2 # To check the tasks part execute  $ sudo systemctl status jitsi-videobridge2 # and you should see Tasks: XX (limit: 65000). # To check the files and process part execute  $ cat /proc/`cat /var/run/jitsi-videobridge/jitsi-videobridge.pid`/limits # and you should see: Max processes 65000 65000 processes Max open files 65000 65000 files End Result    Notice that the HTTPS is crossed out because the Let\u0026rsquo;s Encrypt certificate failed to generate\n"},{"id":2,"href":"/","title":"Step by Step Dev","parent":"","content":""},{"id":3,"href":"/debian10/vosk/vosk/","title":"Vosk Setup","parent":"Vosk","content":"Git \u0026amp; Vosk Server files\n$ git clone https://github.com/alphacep/vosk-server.git Install dependencies\n$ python3 -m pip install aiortc aiohttp aiorpc vosk $ python3 -m pip install websockets Download Speech Recognition model:\nModels can be found here: VOSK Models (alphacephei.com)\n# /home/$USER $ wget http://alphacephei.com/vosk/models/vosk-model-small-en-us-0.15.zip # $ sudo apt-get install unzip $ unzip vosk-model-small-en-us-0.15.zip # Rename the downloaded model for Vosk API to work $ mv vosk-model-small-en-us-0.15 model Create .service File\n$ mkdir -p ~/.config/systemd/user $ cd ~/.config/systemd/user $ touch vosk_service.service # Check $ systemctl --user list-unit-files | grep vosk_service \u0026gt;\u0026gt;\u0026gt; vosk_service.service disabled # Open service file $ nvim ~/.config/systemd/user/vosk_service.service Write to .service File\nOpen .service file with your text editor then paste the following. Make sure to replace kapp with your username instead. If you are unsure about your username, type $ echo $USER\n# systemd unit file for the Vosk Service [Unit] # Human readable name of the unit Description=Vosk Service [Service] # Command to execute when the service is started WorkingDirectory=/home/kapp ExecStart=/home/kapp/venv/bin/python3.8 /home/kapp/vosk-server/websocket/asr_server.py # Disable Python\u0026#39;s buffering of STDOUT and STDERR, so that output from the # service shows up immediately in systemd\u0026#39;s logs Environment=PYTHONUNBUFFERED=1 # Automatically restart the service if it crashes Restart=on-failure # Our service will notify systemd once it is up and running Type=simple # Use a dedicated user to run our service (only for system services) # User=python_demo_service [Install] # Tell systemd to automatically start this service when the system boots # (assuming the service is enabled) WantedBy=default.target Activate service\n$ systemctl --user daemon-reload $ systemctl --user status vosk_service $ systemctl --user start vosk_service $ systemctl --user status vosk_service \u0026gt;\u0026gt;\u0026gt; # Vosk Service should be green and running now! # To exit status log, press \u0026#39;q\u0026#39; (for quit) on your keyboard # Check logs $ sudo -s $ grep \u0026#39;Vosk Service\u0026#39; /var/log/syslog $ grep \u0026#39;python\u0026#39; /var/log/syslog Enable Vosk to start on boot up:\n$ systemctl --user enable vosk_service "},{"id":4,"href":"/debian10/jitsi/","title":"Jitsi","parent":"Debian10","content":""},{"id":5,"href":"/debian10/vosk/","title":"Vosk","parent":"Debian10","content":""},{"id":6,"href":"/categories/","title":"Categories","parent":"Step by Step Dev","content":""},{"id":7,"href":"/tags/","title":"Tags","parent":"Step by Step Dev","content":""}]