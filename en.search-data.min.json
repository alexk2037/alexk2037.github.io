[{"id":0,"href":"/debian10/jitsi/configuration/","title":"Configuration","parent":"Jitsi","content":"Set up Jigasi    # Install Jigasi $ sudo apt install jigasi Inteded SIP User: jigasisipuser@sipprovider.com\nInteded Password: abc123321bca\nGo through Jigasi properties file and uncomment all the transcription-related things. All the settings are under the comment that says \u0026ldquo;# Options regarding Transcription\u0026rdquo;:\n$ vim /etc/jitsi/jigasi/sip-communicator.properties # Optional: Comment out SIP properties in Jigasi config $ vim /etc/jitsi/jigasi/sip-communicator.properties # Align cursor at start of this line: net.java.sip.communicator.impl.protocol.sip.acc1403273890647=acc1403273890647 # Using vim in Windows Terminal, perform # \u0026lt;Ctrl-Alt-V\u0026gt; to enter Visual Block mode # \u0026lt;Ctrl-]\u0026gt; to highlight entire block # \u0026lt;Ctrl-I\u0026gt; to enter multiline insert mode # press \u0026#39;# \u0026#39; on keyboard # \u0026lt;Esc\u0026gt; # et Voila! the entire SIP account block should be commented out Enable Transcription    Configure Subtitle Button\nWhen I started a meeting, the subtitle button was missing:\nTo fix this, I opened my JMS config.js in vim:\n$ sudo -s $ vim /etc/jitsi/meet/debbie.net-config.js I uncommented transcribingEnabled and set to true and uncommented the toolbarButtons array. You may need to restart services if the button still doesn\u0026rsquo;t show up:\n# Restart in this order $ systemctl restart nginx \u0026amp;\u0026amp; systemctl restart prosody \u0026amp;\u0026amp; systemctl restart jitsi-videobridge2 \u0026amp;\u0026amp; systemctl restart jicofo \u0026amp;\u0026amp; systemctl restart jigasi Configure Transcriber    Prosody Config: Finally, I added a VirtualHost recorder to the prosody config file, which was $(hostname -f).cfg.lua\n$ vim /etc/prosody/conf.d/debbie.net.cfg.lua Inside the debbie.net.cfg.lua file, add the following code above the conference Component:\nVirtualHost \u0026#34;recorder.debbie.net\u0026#34; modules_enabled = { \u0026#34;ping\u0026#34;; } authentication = \u0026#34;internal_plain\u0026#34; Add a transcriber user using prosody, specifically to recorder.debbie.net:\n$ prosodyctl register transcriber recorder.debbie.net ai3eiSha2nae Also, change the password of the auth user:\n$ prosodyctl passwd jigasi@auth.debbie.net # This will prompt you to enter a new password. If you want to see the prosody accounts go to: $ cd /var/lib/prosody/ # Then cd into the relevant directory. Convert that password (I used vixohv2geeNa) to base64 and put it in the Jigasi Properties file\n$ python3 \u0026gt;\u0026gt;\u0026gt; import base64 \u0026gt;\u0026gt;\u0026gt; base64.b64encode(b\u0026#39;vixohv2geeNa\u0026#39;) b\u0026#39;dml4b2h2MmdlZU5h\u0026#39; \u0026gt;\u0026gt;\u0026gt; exit() $ vim /etc/jitsi/jigasi/sip-communicator.properties # Add password to xmpp password: net.java.sip.communicator.impl.protocol.jabber.acc-xmpp-1.PASSWORD=dml4b2h2MmdlZU5h Jigasi Config: Then I added the transcriber user to Jigasi Communicator Properties:\n$ vim /etc/jitsi/jigasi/sip-communicator.properties # Inside file add: org.jitsi.jigasi.xmpp.acc.USER_ID=transcriber@recorder.debbie.net org.jitsi.jigasi.xmpp.acc.PASS=ai3eiSha2nae org.jitsi.jigasi.xmpp.acc.ANONYMOUS_AUTH=false org.jitsi.jigasi.xmpp.acc.ALLOW_NON_SECURE=true Jicofo Config: Next, I added auth info to Jicofo Communicator Properties:\n$ vim /etc/jitsi/jicofo/sip-communicator.properties # Inside file, append: org.jitsi.jicofo.jigasi.BREWERY=JigasiBrewery@internal.auth.debbie.net Then restart JMS:\n# Restart in this order $ systemctl stop nginx prosody jitsi-videobridge2 jicofo jigasi $ systemctl status prosody jitsi-videobridge2 jicofo jigasi $ systemctl start nginx prosody jitsi-videobridge2 jicofo jigasi # Or $ systemctl restart nginx prosody jitsi-videobridge2 jicofo jigasi END RESULT    Troubleshooting    Delete prosody accounts and add them back again\n# Delete users $ prosodyctl deluser jigasi@auth.192.168.2.72 $ prosodyctl deluser transcriber@recorder.192.168.2.72 # Check folders to make sure they were deleted $ ls /var/lib/prosody/recorder*/accounts/ # Should return nothing $ ls /var/lib/prosody/auth*/accounts/ # Should no auth # Restart prosody $ systemctl restart prosody $ systemctl status prosody # Add users again $ prosodyctl register jigasi auth.192.168.2.72 vixohv2geeNa $ prosodyctl register transcriber recorder.192.168.2.72 ai3eiSha2nae # Check folders to make sure they were deleted $ ls /var/lib/prosody/recorder*/accounts/ # Should return transcriber.dat $ ls /var/lib/prosody/auth*/accounts/ # Should return jigasi.dat # Restart prosody $ systemctl restart prosody $ systemctl status prosody "},{"id":1,"href":"/debian10/","title":"Debian10","parent":"Step by Step Dev","content":""},{"id":2,"href":"/","title":"Step by Step Dev","parent":"","content":""},{"id":3,"href":"/debian10/vosk/python/","title":"General Python Setup","parent":"Vosk","content":"Install Python 3.8\nWhat version of Python can I use? ↕  For Vosk, nshmyrev on GitHub recommends Python 3.8   Follow the article step by step: How to install Python 3.8 on Debian 10 (Linuxize)\nTo set Python 3.8.2 as the default simply add the following to the end of your Shell profile\n# ~/.Shellrc alias python3=\u0026#34;python3.8\u0026#34; Python Venv Setup\nCreate a virtual environment:\n# Use Python 3.8.2 $ python3 -m venv venv $ source venv/bin/activate "},{"id":4,"href":"/debian10/jitsi/jitsi/","title":"Jitsi Setup","parent":"Jitsi","content":"Required packages and repository updates    Install required packages\n# Data encryption $ sudo apt install gnupg2 # Web server $ sudo apt install nginx-full # Java Runtime Environment $ sudo apt install default-jre # Java 11 (should already be installed on Debian 10) $ sudo apt install openjdk-11-jre-headless  What is the recommended Java Version? ↕  Jitsi team made optimizations for Java 8, however, Debian 10 (Buster) supports only Java 11 officially\nSource: Jitsi Community Forum     Retrieve latest packages:\n$ sudo apt update # Ensure support for apt repositories served via HTTPS $ sudo apt install apt-transport-https # Retrieve the latest package versions across all repositories $ sudo apt update $ sudo apt upgrade  Network Setup ↕  Domain: debbie.net\nOpen windows hosts file (C:\\Windows\\System32\\drivers\\etc\\hosts) in notepad and add:\n# hosts 192.168.2.72 debbie.net Then go to hosts file in Debian server:\n# /etc/hosts 192.168.2.72 debserver10.debbie.net debserver10  Set up the Fully Qualified Domain Name (FQDN) (optional):  $ nvim /etc/hosts # Add to file: 127.0.0.1 localhost 192.168.2.72 debbie.net    Add the Jitsi package repository    This will add the jitsi repository to your package sources to make the Jitsi Meet packages available.\n$ curl https://download.jitsi.org/jitsi-key.gpg.key | sudo sh -c \u0026#39;gpg --dearmor \u0026gt; /usr/share/keyrings/jitsi-keyring.gpg\u0026#39; $ echo \u0026#39;deb [signed-by=/usr/share/keyrings/jitsi-keyring.gpg] https://download.jitsi.org stable/\u0026#39; | sudo tee /etc/apt/sources.list.d/jitsi-stable.list \u0026gt; /dev/null # update all package sources $ sudo apt update Setup and configure your firewall    $ sudo apt install ufw $ sudo ufw allow 80/tcp \u0026amp;\u0026amp; sudo ufw allow 443/tcp \u0026amp;\u0026amp; sudo ufw allow 10000/udp \u0026amp;\u0026amp; sudo ufw allow 22/tcp \u0026amp;\u0026amp; sudo ufw allow 3478/udp \u0026amp;\u0026amp; sudo ufw allow 5349/tcp $ sudo ufw enable $ sudo ufw status verbose Install Jitsi Meet    Hostname: IP address of machine: 192.168.2.72\nSSL/TLS certificate generation: Choose option (1) Generate TLS certificate\n# jitsi-meet installation $ sudo apt install jitsi-meet # Generate a Let\u0026#39;s Encrypt certificate (optional, recommended) $ sudo /usr/share/jitsi-meet/scripts/install-letsencrypt-cert.sh  Note from Let\u0026rsquo;s Encrypt: \u0026ldquo;Requested name 192.168.2.72 is an IP address. The Let\u0026rsquo;s Encrypt certificate authority will not issue certificates for a bare IP address.\n Systemd Commands    # To reload the systemd changes on a running system execute  $ sudo systemctl daemon-reload $ sudo systemctl restart jitsi-videobridge2 # To check the tasks part execute  $ sudo systemctl status jitsi-videobridge2 # and you should see Tasks: XX (limit: 65000). # To check the files and process part execute  $ cat /proc/`cat /var/run/jitsi-videobridge/jitsi-videobridge.pid`/limits # and you should see: Max processes 65000 65000 processes Max open files 65000 65000 files End Result    Notice that the HTTPS is crossed out because the Let\u0026rsquo;s Encrypt certificate failed to generate\n"},{"id":5,"href":"/debian10/vosk/vosk/","title":"Vosk Setup","parent":"Vosk","content":"Git \u0026amp; Vosk Server files\n$ git clone https://github.com/alphacep/vosk-server.git Install dependencies\n$ python3 -m pip install aiortc aiohttp aiorpc vosk $ python3 -m pip install websockets Download Speech Recognition model:\nModels can be found here: VOSK Models (alphacephei.com)\n# /home/$USER $ wget http://alphacephei.com/vosk/models/vosk-model-small-en-us-0.15.zip # $ sudo apt-get install unzip $ unzip vosk-model-small-en-us-0.15.zip # Rename the downloaded model for Vosk API to work $ mv vosk-model-small-en-us-0.15 model Create .service File\n$ mkdir -p ~/.config/systemd/user $ cd ~/.config/systemd/user $ touch vosk_service.service # Check $ systemctl --user list-unit-files | grep vosk_service \u0026gt;\u0026gt;\u0026gt; vosk_service.service disabled # Open service file $ nvim ~/.config/systemd/user/vosk_service.service Write to .service File\nOpen .service file with your text editor then paste the following. Make sure to replace kapp with your username instead. If you are unsure about your username, type $ echo $USER\n# systemd unit file for the Vosk Service [Unit] # Human readable name of the unit Description=Vosk Service [Service] # Command to execute when the service is started WorkingDirectory=/home/kapp ExecStart=/home/kapp/venv/bin/python3.8 /home/kapp/vosk-server/websocket/asr_server.py # Disable Python\u0026#39;s buffering of STDOUT and STDERR, so that output from the # service shows up immediately in systemd\u0026#39;s logs Environment=PYTHONUNBUFFERED=1 # Automatically restart the service if it crashes Restart=on-failure # Our service will notify systemd once it is up and running Type=simple # Use a dedicated user to run our service (only for system services) # User=python_demo_service [Install] # Tell systemd to automatically start this service when the system boots # (assuming the service is enabled) WantedBy=default.target Activate service\n$ systemctl --user daemon-reload $ systemctl --user status vosk_service $ systemctl --user start vosk_service $ systemctl --user status vosk_service \u0026gt;\u0026gt;\u0026gt; # Vosk Service should be green and running now! # To exit status log, press \u0026#39;q\u0026#39; (for quit) on your keyboard # Check logs $ sudo -s $ grep \u0026#39;Vosk Service\u0026#39; /var/log/syslog $ grep \u0026#39;python\u0026#39; /var/log/syslog Enable Vosk to start on boot up:\n$ systemctl --user enable vosk_service "},{"id":6,"href":"/debian10/jitsi/","title":"Jitsi","parent":"Debian10","content":""},{"id":7,"href":"/debian10/vosk/","title":"Vosk","parent":"Debian10","content":""},{"id":8,"href":"/categories/","title":"Categories","parent":"Step by Step Dev","content":""},{"id":9,"href":"/tags/","title":"Tags","parent":"Step by Step Dev","content":""}]